<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API\Models\Operations;

use LukeHagar\Plex_API\Utils\SpeakeasyMetadata;
class GetResizedPhotoRequest
{
    /**
     * The width for the resized photo
     *
     * @var float $width
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=width')]
    public float $width;

    /**
     * The height for the resized photo
     *
     * @var float $height
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=height')]
    public float $height;

    /**
     * The width for the resized photo
     *
     * @var float $blur
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=blur')]
    public float $blur;

    /**
     * images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against.
     *
     * @var MinSize $minSize
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minSize')]
    public MinSize $minSize;

    /**
     * allow images to be resized beyond native dimensions.
     *
     * @var Upscale $upscale
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=upscale')]
    public Upscale $upscale;

    /**
     * path to image within Plex
     *
     * @var string $url
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=url')]
    public string $url;

    /**
     * The opacity for the resized photo
     *
     * @var int $opacity
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=opacity')]
    public int $opacity;

    /**
     * @param  float  $width
     * @param  float  $height
     * @param  int  $opacity
     * @param  float  $blur
     * @param  MinSize  $minSize
     * @param  Upscale  $upscale
     * @param  string  $url
     */
    public function __construct(float $width, float $height, float $blur, MinSize $minSize, Upscale $upscale, string $url, int $opacity = 100)
    {
        $this->width = $width;
        $this->height = $height;
        $this->blur = $blur;
        $this->minSize = $minSize;
        $this->upscale = $upscale;
        $this->url = $url;
        $this->opacity = $opacity;
    }
}