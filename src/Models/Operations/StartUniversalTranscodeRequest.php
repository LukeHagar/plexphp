<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API\Models\Operations;

use LukeHagar\Plex_API\Utils\SpeakeasyMetadata;
class StartUniversalTranscodeRequest
{
    /**
     * Whether the media item has MDE
     *
     * @var float $hasMDE
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=hasMDE')]
    public float $hasMDE;

    /**
     * The path to the media item to transcode
     *
     * @var string $path
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=path')]
    public string $path;

    /**
     * The index of the media item to transcode
     *
     * @var float $mediaIndex
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=mediaIndex')]
    public float $mediaIndex;

    /**
     * The index of the part to transcode
     *
     * @var float $partIndex
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=partIndex')]
    public float $partIndex;

    /**
     * The protocol to use for the transcode session
     *
     * @var string $protocol
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=protocol')]
    public string $protocol;

    /**
     * Whether to use fast seek or not
     *
     * @var ?float $fastSeek
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fastSeek')]
    public ?float $fastSeek = null;

    /**
     * Whether to use direct play or not
     *
     * @var ?float $directPlay
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=directPlay')]
    public ?float $directPlay = null;

    /**
     * Whether to use direct stream or not
     *
     * @var ?float $directStream
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=directStream')]
    public ?float $directStream = null;

    /**
     * The size of the subtitles
     *
     * @var ?float $subtitleSize
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=subtitleSize')]
    public ?float $subtitleSize = null;

    /**
     * The subtitles
     *
     * @var ?string $subtites
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=subtites')]
    public ?string $subtites = null;

    /**
     * The audio boost
     *
     * @var ?float $audioBoost
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=audioBoost')]
    public ?float $audioBoost = null;

    /**
     * The location of the transcode session
     *
     * @var ?string $location
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=location')]
    public ?string $location = null;

    /**
     * The size of the media buffer
     *
     * @var ?float $mediaBufferSize
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=mediaBufferSize')]
    public ?float $mediaBufferSize = null;

    /**
     * The session ID
     *
     * @var ?string $session
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=session')]
    public ?string $session = null;

    /**
     * Whether to add a debug overlay or not
     *
     * @var ?float $addDebugOverlay
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=addDebugOverlay')]
    public ?float $addDebugOverlay = null;

    /**
     * Whether to auto adjust quality or not
     *
     * @var ?float $autoAdjustQuality
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=autoAdjustQuality')]
    public ?float $autoAdjustQuality = null;

    public function __construct()
    {
        $this->hasMDE = 0;
        $this->path = '';
        $this->mediaIndex = 0;
        $this->partIndex = 0;
        $this->protocol = '';
        $this->fastSeek = null;
        $this->directPlay = null;
        $this->directStream = null;
        $this->subtitleSize = null;
        $this->subtites = null;
        $this->audioBoost = null;
        $this->location = null;
        $this->mediaBufferSize = null;
        $this->session = null;
        $this->addDebugOverlay = null;
        $this->autoAdjustQuality = null;
    }
}