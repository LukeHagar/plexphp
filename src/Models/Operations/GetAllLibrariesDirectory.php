<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API\Models\Operations;


class GetAllLibrariesDirectory
{
    /**
     * Indicates whether syncing is allowed.
     *
     * @var bool $allowSync
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('allowSync')]
    public bool $allowSync;

    /**
     * URL for the background artwork of the media container.
     *
     * @var string $art
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('art')]
    public string $art;

    /**
     * The relative path to the composite media item.
     *
     * @var string $composite
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('composite')]
    public string $composite;

    /**
     * UNKNOWN
     *
     * @var bool $filters
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('filters')]
    public bool $filters;

    /**
     * Indicates whether the library is currently being refreshed or updated
     *
     * @var bool $refreshing
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('refreshing')]
    public bool $refreshing;

    /**
     * URL for the thumbnail image of the media container.
     *
     * @var string $thumb
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('thumb')]
    public string $thumb;

    /**
     * The library key representing the unique identifier
     *
     * @var string $key
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('key')]
    public string $key;

    /**
     *
     * @var GetAllLibrariesType $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\GetAllLibrariesType')]
    public GetAllLibrariesType $type;

    /**
     * The title of the library
     *
     * @var string $title
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('title')]
    public string $title;

    /**
     * The Plex agent used to match and retrieve media metadata.
     *
     * @var string $agent
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('agent')]
    public string $agent;

    /**
     * UNKNOWN
     *
     * @var string $scanner
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scanner')]
    public string $scanner;

    /**
     * The Plex library language that has been set
     *
     * @var string $language
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('language')]
    public string $language;

    /**
     * The universally unique identifier for the library.
     *
     * @var string $uuid
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('uuid')]
    public string $uuid;

    /**
     * Unix epoch datetime in seconds
     *
     * @var int $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updatedAt')]
    public int $updatedAt;

    /**
     * Unix epoch datetime in seconds
     *
     * @var int $scannedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('scannedAt')]
    public int $scannedAt;

    /**
     * UNKNOWN
     *
     * @var bool $content
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('content')]
    public bool $content;

    /**
     * UNKNOWN
     *
     * @var bool $directory
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('directory')]
    public bool $directory;

    /**
     * The number of seconds since the content was last changed relative to now.
     *
     * @var int $contentChangedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('contentChangedAt')]
    public int $contentChangedAt;

    /**
     * $location
     *
     * @var array<GetAllLibrariesLocation> $location
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('Location')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\LukeHagar\Plex_API\Models\Operations\GetAllLibrariesLocation>')]
    public array $location;

    /**
     *
     * @var ?int $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('createdAt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $createdAt = null;

    /**
     *
     * @var ?Hidden $hidden
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('hidden')]
    #[\Speakeasy\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\Hidden|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Hidden $hidden = null;

    /**
     * @param  bool  $allowSync
     * @param  string  $art
     * @param  string  $composite
     * @param  bool  $filters
     * @param  bool  $refreshing
     * @param  string  $thumb
     * @param  string  $key
     * @param  GetAllLibrariesType  $type
     * @param  string  $title
     * @param  string  $agent
     * @param  string  $scanner
     * @param  string  $language
     * @param  string  $uuid
     * @param  int  $updatedAt
     * @param  int  $scannedAt
     * @param  bool  $content
     * @param  bool  $directory
     * @param  int  $contentChangedAt
     * @param  array<GetAllLibrariesLocation>  $location
     * @param  ?int  $createdAt
     * @param  ?Hidden  $hidden
     * @phpstan-pure
     */
    public function __construct(bool $allowSync, string $art, string $composite, bool $filters, bool $refreshing, string $thumb, string $key, GetAllLibrariesType $type, string $title, string $agent, string $scanner, string $language, string $uuid, int $updatedAt, int $scannedAt, bool $content, bool $directory, int $contentChangedAt, array $location, ?int $createdAt = null, ?Hidden $hidden = Hidden::Disable)
    {
        $this->allowSync = $allowSync;
        $this->art = $art;
        $this->composite = $composite;
        $this->filters = $filters;
        $this->refreshing = $refreshing;
        $this->thumb = $thumb;
        $this->key = $key;
        $this->type = $type;
        $this->title = $title;
        $this->agent = $agent;
        $this->scanner = $scanner;
        $this->language = $language;
        $this->uuid = $uuid;
        $this->updatedAt = $updatedAt;
        $this->scannedAt = $scannedAt;
        $this->content = $content;
        $this->directory = $directory;
        $this->contentChangedAt = $contentChangedAt;
        $this->location = $location;
        $this->createdAt = $createdAt;
        $this->hidden = $hidden;
    }
}