<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API\Models\Operations;


class GetLibraryItemsPart
{
    /**
     * Unique part identifier.
     *
     * @var int $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public int $id;

    /**
     * Indicates if the part is accessible.
     *
     * @var ?bool $accessible
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('accessible')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $accessible = null;

    /**
     * Indicates if the part exists.
     *
     * @var ?bool $exists
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('exists')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $exists = null;

    /**
     * Key to access this part.
     *
     * @var ?string $key
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $key = null;

    /**
     *
     * @var ?string $indexes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('indexes')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $indexes = null;

    /**
     * Duration of the part in milliseconds.
     *
     * @var ?int $duration
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('duration')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $duration = null;

    /**
     * File path for the part.
     *
     * @var ?string $file
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('file')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $file = null;

    /**
     * File size in bytes.
     *
     * @var ?int $size
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('size')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $size = null;

    /**
     *
     * @var ?int $packetLength
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('packetLength')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $packetLength = null;

    /**
     * Container format of the part.
     *
     * @var ?string $container
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('container')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $container = null;

    /**
     * Video profile for the part.
     *
     * @var ?string $videoProfile
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('videoProfile')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $videoProfile = null;

    /**
     * The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
     *
     * @var ?string $audioProfile
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('audioProfile')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $audioProfile = null;

    /**
     *
     * @var ?bool $has64bitOffsets
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('has64bitOffsets')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $has64bitOffsets = null;

    /**
     * Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
     *
     *
     *
     * @var GetLibraryItemsOptimizedForStreaming1|bool|null $optimizedForStreaming
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('optimizedForStreaming')]
    #[\Speakeasy\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\GetLibraryItemsOptimizedForStreaming1|bool|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public GetLibraryItemsOptimizedForStreaming1|bool|null $optimizedForStreaming = null;

    /**
     *
     * @var ?GetLibraryItemsHasThumbnail $hasThumbnail
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('hasThumbnail')]
    #[\Speakeasy\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\GetLibraryItemsHasThumbnail|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?GetLibraryItemsHasThumbnail $hasThumbnail = null;

    /**
     * @param  int  $id
     * @param  ?bool  $accessible
     * @param  ?bool  $exists
     * @param  ?string  $key
     * @param  ?string  $indexes
     * @param  ?int  $duration
     * @param  ?string  $file
     * @param  ?int  $size
     * @param  ?int  $packetLength
     * @param  ?string  $container
     * @param  ?string  $videoProfile
     * @param  ?string  $audioProfile
     * @param  ?bool  $has64bitOffsets
     * @param  GetLibraryItemsOptimizedForStreaming1|bool|null  $optimizedForStreaming
     * @param  ?GetLibraryItemsHasThumbnail  $hasThumbnail
     * @phpstan-pure
     */
    public function __construct(int $id, ?bool $accessible = null, ?bool $exists = null, ?string $key = null, ?string $indexes = null, ?int $duration = null, ?string $file = null, ?int $size = null, ?int $packetLength = null, ?string $container = null, ?string $videoProfile = null, ?string $audioProfile = null, ?bool $has64bitOffsets = null, GetLibraryItemsOptimizedForStreaming1|bool|null $optimizedForStreaming = null, ?GetLibraryItemsHasThumbnail $hasThumbnail = GetLibraryItemsHasThumbnail::False)
    {
        $this->id = $id;
        $this->accessible = $accessible;
        $this->exists = $exists;
        $this->key = $key;
        $this->indexes = $indexes;
        $this->duration = $duration;
        $this->file = $file;
        $this->size = $size;
        $this->packetLength = $packetLength;
        $this->container = $container;
        $this->videoProfile = $videoProfile;
        $this->audioProfile = $audioProfile;
        $this->has64bitOffsets = $has64bitOffsets;
        $this->optimizedForStreaming = $optimizedForStreaming;
        $this->hasThumbnail = $hasThumbnail;
    }
}