<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API\Models\Operations;


/** PostUsersSignInDataUserPlexAccount - Returns the user account data with a valid auth token */
class PostUsersSignInDataUserPlexAccount
{
    /**
     * Unknown
     *
     * @var ?bool $adsConsent
     */
    #[\JMS\Serializer\Annotation\SerializedName('adsConsent')]
    public ?bool $adsConsent;

    /**
     * Unknown
     *
     * @var ?\DateTime $adsConsentReminderAt
     */
    #[\JMS\Serializer\Annotation\SerializedName('adsConsentReminderAt')]
    public ?\DateTime $adsConsentReminderAt;

    /**
     * Unknown
     *
     * @var ?\DateTime $adsConsentSetAt
     */
    #[\JMS\Serializer\Annotation\SerializedName('adsConsentSetAt')]
    public ?\DateTime $adsConsentSetAt;

    /**
     * Unknown
     *
     * @var ?bool $anonymous
     */
    #[\JMS\Serializer\Annotation\SerializedName('anonymous')]
    public ?bool $anonymous;

    /**
     * The account token
     *
     * @var string $authToken
     */
    #[\JMS\Serializer\Annotation\SerializedName('authToken')]
    public string $authToken;

    /**
     * If the two-factor authentication backup codes have been created
     *
     * @var bool $backupCodesCreated
     */
    #[\JMS\Serializer\Annotation\SerializedName('backupCodesCreated')]
    public bool $backupCodesCreated;

    /**
     * If the account has been confirmed
     *
     * @var bool $confirmed
     */
    #[\JMS\Serializer\Annotation\SerializedName('confirmed')]
    public bool $confirmed;

    /**
     * The account country
     *
     * @var string $country
     */
    #[\JMS\Serializer\Annotation\SerializedName('country')]
    public string $country;

    /**
     * The account email address
     *
     * @var string $email
     */
    #[\JMS\Serializer\Annotation\SerializedName('email')]
    public string $email;

    /**
     * If login with email only is enabled
     *
     * @var bool $emailOnlyAuth
     */
    #[\JMS\Serializer\Annotation\SerializedName('emailOnlyAuth')]
    public bool $emailOnlyAuth;

    /**
     * If experimental features are enabled
     *
     * @var bool $experimentalFeatures
     */
    #[\JMS\Serializer\Annotation\SerializedName('experimentalFeatures')]
    public bool $experimentalFeatures;

    /**
     * Your account full name
     *
     * @var string $friendlyName
     */
    #[\JMS\Serializer\Annotation\SerializedName('friendlyName')]
    public string $friendlyName;

    /**
     * List of devices your allowed to use with this account
     *
     * @var array<string> $entitlements
     */
    #[\JMS\Serializer\Annotation\SerializedName('entitlements')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $entitlements;

    /**
     * If the account is a Plex Home guest user
     *
     * @var bool $guest
     */
    #[\JMS\Serializer\Annotation\SerializedName('guest')]
    public bool $guest;

    /**
     * If the account has a password
     *
     * @var bool $hasPassword
     */
    #[\JMS\Serializer\Annotation\SerializedName('hasPassword')]
    public bool $hasPassword;

    /**
     * If the account is a Plex Home user
     *
     * @var bool $home
     */
    #[\JMS\Serializer\Annotation\SerializedName('home')]
    public bool $home;

    /**
     * If the account is the Plex Home admin
     *
     * @var bool $homeAdmin
     */
    #[\JMS\Serializer\Annotation\SerializedName('homeAdmin')]
    public bool $homeAdmin;

    /**
     * The number of accounts in the Plex Home
     *
     * @var int $homeSize
     */
    #[\JMS\Serializer\Annotation\SerializedName('homeSize')]
    public int $homeSize;

    /**
     * The Plex account ID
     *
     * @var int $id
     */
    #[\JMS\Serializer\Annotation\SerializedName('id')]
    public int $id;

    /**
     * Unix epoch datetime
     *
     * @var int $joinedAt
     */
    #[\JMS\Serializer\Annotation\SerializedName('joinedAt')]
    public int $joinedAt;

    /**
     * The account locale
     *
     * @var ?string $locale
     */
    #[\JMS\Serializer\Annotation\SerializedName('locale')]
    public ?string $locale;

    /**
     * If you are subscribed to the Plex newsletter
     *
     * @var bool $mailingListActive
     */
    #[\JMS\Serializer\Annotation\SerializedName('mailingListActive')]
    public bool $mailingListActive;

    /**
     * Your current mailing list status
     *
     * @var PostUsersSignInDataMailingListStatus $mailingListStatus
     */
    #[\JMS\Serializer\Annotation\SerializedName('mailingListStatus')]
    #[\JMS\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\PostUsersSignInDataMailingListStatus')]
    public PostUsersSignInDataMailingListStatus $mailingListStatus;

    /**
     * The maximum number of accounts allowed in the Plex Home
     *
     * @var int $maxHomeSize
     */
    #[\JMS\Serializer\Annotation\SerializedName('maxHomeSize')]
    public int $maxHomeSize;

    /**
     * [Might be removed] The hashed Plex Home PIN 
     *
     * @var ?string $pin
     * @deprecated  field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    #[\JMS\Serializer\Annotation\SerializedName('pin')]
    #[\JMS\Serializer\Annotation\SkipWhenNull]
    public ?string $pin = null;

    /**
     *
     * @var PostUsersSignInDataUserProfile $profile
     */
    #[\JMS\Serializer\Annotation\SerializedName('profile')]
    #[\JMS\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\PostUsersSignInDataUserProfile')]
    public PostUsersSignInDataUserProfile $profile;

    /**
     * If the account has a Plex Home PIN enabled
     *
     * @var bool $protected
     */
    #[\JMS\Serializer\Annotation\SerializedName('protected')]
    public bool $protected;

    /**
     * Unix epoch datetime
     *
     * @var int $rememberExpiresAt
     */
    #[\JMS\Serializer\Annotation\SerializedName('rememberExpiresAt')]
    public int $rememberExpiresAt;

    /**
     * If the account is a Plex Home managed user
     *
     * @var bool $restricted
     */
    #[\JMS\Serializer\Annotation\SerializedName('restricted')]
    public bool $restricted;

    /**
     * [Might be removed] List of account roles. Plexpass membership listed here
     *
     * @var ?array<string> $roles
     */
    #[\JMS\Serializer\Annotation\SerializedName('roles')]
    #[\JMS\Serializer\Annotation\Type('array<string>|null')]
    #[\JMS\Serializer\Annotation\SkipWhenNull]
    public ?array $roles = null;

    /**
     * Unknown
     *
     * @var string $scrobbleTypes
     */
    #[\JMS\Serializer\Annotation\SerializedName('scrobbleTypes')]
    public string $scrobbleTypes;

    /**
     * $services
     *
     * @var array<PostUsersSignInDataServices> $services
     */
    #[\JMS\Serializer\Annotation\SerializedName('services')]
    #[\JMS\Serializer\Annotation\Type('array<\LukeHagar\Plex_API\Models\Operations\PostUsersSignInDataServices>')]
    public array $services;

    /**
     * If the accountâ€™s Plex Pass subscription is active
     *
     * @var PostUsersSignInDataSubscription $subscription
     */
    #[\JMS\Serializer\Annotation\SerializedName('subscription')]
    #[\JMS\Serializer\Annotation\Type('\LukeHagar\Plex_API\Models\Operations\PostUsersSignInDataSubscription')]
    public PostUsersSignInDataSubscription $subscription;

    /**
     * Description of the Plex Pass subscription
     *
     * @var ?string $subscriptionDescription
     */
    #[\JMS\Serializer\Annotation\SerializedName('subscriptionDescription')]
    public ?string $subscriptionDescription;

    /**
     * $subscriptions
     *
     * @var array<PostUsersSignInDataAuthenticationSubscription> $subscriptions
     */
    #[\JMS\Serializer\Annotation\SerializedName('subscriptions')]
    #[\JMS\Serializer\Annotation\Type('array<\LukeHagar\Plex_API\Models\Operations\PostUsersSignInDataAuthenticationSubscription>')]
    public array $subscriptions;

    /**
     * URL of the account thumbnail
     *
     * @var string $thumb
     */
    #[\JMS\Serializer\Annotation\SerializedName('thumb')]
    public string $thumb;

    /**
     * The title of the account (username or friendly name)
     *
     * @var string $title
     */
    #[\JMS\Serializer\Annotation\SerializedName('title')]
    public string $title;

    /**
     * If two-factor authentication is enabled
     *
     * @var bool $twoFactorEnabled
     */
    #[\JMS\Serializer\Annotation\SerializedName('twoFactorEnabled')]
    public bool $twoFactorEnabled;

    /**
     * The account username
     *
     * @var string $username
     */
    #[\JMS\Serializer\Annotation\SerializedName('username')]
    public string $username;

    /**
     * The account UUID
     *
     * @var string $uuid
     */
    #[\JMS\Serializer\Annotation\SerializedName('uuid')]
    public string $uuid;

    /**
     * $pastSubscriptions
     *
     * @var array<PastSubscription> $pastSubscriptions
     */
    #[\JMS\Serializer\Annotation\SerializedName('pastSubscriptions')]
    #[\JMS\Serializer\Annotation\Type('array<\LukeHagar\Plex_API\Models\Operations\PastSubscription>')]
    public array $pastSubscriptions;

    /**
     * $trials
     *
     * @var array<Trials> $trials
     */
    #[\JMS\Serializer\Annotation\SerializedName('trials')]
    #[\JMS\Serializer\Annotation\Type('array<\LukeHagar\Plex_API\Models\Operations\Trials>')]
    public array $trials;

    /**
     * @param  string  $authToken
     * @param  bool  $backupCodesCreated
     * @param  bool  $confirmed
     * @param  string  $country
     * @param  string  $email
     * @param  bool  $emailOnlyAuth
     * @param  bool  $experimentalFeatures
     * @param  string  $friendlyName
     * @param  array<string>  $entitlements
     * @param  bool  $guest
     * @param  bool  $hasPassword
     * @param  bool  $home
     * @param  bool  $homeAdmin
     * @param  int  $homeSize
     * @param  int  $id
     * @param  int  $joinedAt
     * @param  bool  $mailingListActive
     * @param  PostUsersSignInDataMailingListStatus  $mailingListStatus
     * @param  int  $maxHomeSize
     * @param  PostUsersSignInDataUserProfile  $profile
     * @param  bool  $protected
     * @param  int  $rememberExpiresAt
     * @param  bool  $restricted
     * @param  string  $scrobbleTypes
     * @param  array<PostUsersSignInDataServices>  $services
     * @param  PostUsersSignInDataSubscription  $subscription
     * @param  array<PostUsersSignInDataAuthenticationSubscription>  $subscriptions
     * @param  string  $thumb
     * @param  string  $title
     * @param  bool  $twoFactorEnabled
     * @param  string  $username
     * @param  string  $uuid
     * @param  array<PastSubscription>  $pastSubscriptions
     * @param  array<Trials>  $trials
     * @param  ?bool  $adsConsent
     * @param  ?\DateTime  $adsConsentReminderAt
     * @param  ?\DateTime  $adsConsentSetAt
     * @param  ?bool  $anonymous
     * @param  ?string  $locale
     * @param  ?string  $pin
     * @param  ?array<string>  $roles
     * @param  ?string  $subscriptionDescription
     */
    public function __construct(string $authToken, bool $backupCodesCreated, bool $confirmed, string $country, string $email, bool $emailOnlyAuth, bool $experimentalFeatures, string $friendlyName, array $entitlements, bool $guest, bool $hasPassword, bool $home, bool $homeAdmin, int $homeSize, int $id, int $joinedAt, bool $mailingListActive, PostUsersSignInDataMailingListStatus $mailingListStatus, int $maxHomeSize, PostUsersSignInDataUserProfile $profile, bool $protected, int $rememberExpiresAt, bool $restricted, string $scrobbleTypes, array $services, PostUsersSignInDataSubscription $subscription, array $subscriptions, string $thumb, string $title, bool $twoFactorEnabled, string $username, string $uuid, array $pastSubscriptions, array $trials, ?bool $adsConsent = null, ?\DateTime $adsConsentReminderAt = null, ?\DateTime $adsConsentSetAt = null, ?bool $anonymous = null, ?string $locale = null, ?string $pin = null, ?array $roles = null, ?string $subscriptionDescription = null)
    {
        $this->authToken = $authToken;
        $this->backupCodesCreated = $backupCodesCreated;
        $this->confirmed = $confirmed;
        $this->country = $country;
        $this->email = $email;
        $this->emailOnlyAuth = $emailOnlyAuth;
        $this->experimentalFeatures = $experimentalFeatures;
        $this->friendlyName = $friendlyName;
        $this->entitlements = $entitlements;
        $this->guest = $guest;
        $this->hasPassword = $hasPassword;
        $this->home = $home;
        $this->homeAdmin = $homeAdmin;
        $this->homeSize = $homeSize;
        $this->id = $id;
        $this->joinedAt = $joinedAt;
        $this->mailingListActive = $mailingListActive;
        $this->mailingListStatus = $mailingListStatus;
        $this->maxHomeSize = $maxHomeSize;
        $this->profile = $profile;
        $this->protected = $protected;
        $this->rememberExpiresAt = $rememberExpiresAt;
        $this->restricted = $restricted;
        $this->scrobbleTypes = $scrobbleTypes;
        $this->services = $services;
        $this->subscription = $subscription;
        $this->subscriptions = $subscriptions;
        $this->thumb = $thumb;
        $this->title = $title;
        $this->twoFactorEnabled = $twoFactorEnabled;
        $this->username = $username;
        $this->uuid = $uuid;
        $this->pastSubscriptions = $pastSubscriptions;
        $this->trials = $trials;
        $this->adsConsent = $adsConsent;
        $this->adsConsentReminderAt = $adsConsentReminderAt;
        $this->adsConsentSetAt = $adsConsentSetAt;
        $this->anonymous = $anonymous;
        $this->locale = $locale;
        $this->pin = $pin;
        $this->roles = $roles;
        $this->subscriptionDescription = $subscriptionDescription;
    }
}