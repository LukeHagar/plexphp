<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API;

class Authentication 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Get a Transient Token.
     * 
     * This endpoint provides the caller with a temporary token with the same access level as the caller's token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * 
     * 
     * @param \LukeHagar\Plex_API\Models\Operations\GetTransientTokenQueryParamType $type
     * @param \LukeHagar\Plex_API\Models\Operations\Scope $scope
     * @return \LukeHagar\Plex_API\Models\Operations\GetTransientTokenResponse
     */
	public function getTransientToken(
        \LukeHagar\Plex_API\Models\Operations\GetTransientTokenQueryParamType $type,
        \LukeHagar\Plex_API\Models\Operations\Scope $scope,
    ): \LukeHagar\Plex_API\Models\Operations\GetTransientTokenResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetTransientTokenRequest();
        $request->type = $type;
        $request->scope = $scope;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/security/token');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetTransientTokenRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetTransientTokenResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetTransientTokenResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Source Connection Information
     * 
     * If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token.
     * Note: requires Plex Media Server >= 1.15.4.
     * 
     * 
     * @param string $source
     * @return \LukeHagar\Plex_API\Models\Operations\GetSourceConnectionInformationResponse
     */
	public function getSourceConnectionInformation(
        string $source,
    ): \LukeHagar\Plex_API\Models\Operations\GetSourceConnectionInformationResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetSourceConnectionInformationRequest();
        $request->source = $source;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/security/resources');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetSourceConnectionInformationRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetSourceConnectionInformationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetSourceConnectionInformationResponseBody', 'json');
            }
        }

        return $response;
    }
}