<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API;

class Library 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Get Hash Value
     * 
     * This resource returns hash values for local files
     * 
     * @param string $url
     * @param ?float $type
     * @return \LukeHagar\Plex_API\Models\Operations\GetFileHashResponse
     */
	public function getFileHash(
        string $url,
        ?float $type = null,
    ): \LukeHagar\Plex_API\Models\Operations\GetFileHashResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetFileHashRequest();
        $request->url = $url;
        $request->type = $type;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/hashes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetFileHashRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetFileHashResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetFileHashResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Recently Added
     * 
     * This endpoint will return the recently added content.
     * 
     * 
     * @return \LukeHagar\Plex_API\Models\Operations\GetRecentlyAddedResponse
     */
	public function getRecentlyAdded(
    ): \LukeHagar\Plex_API\Models\Operations\GetRecentlyAddedResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/recentlyAdded');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetRecentlyAddedResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->twoHundredApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetRecentlyAddedResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndOneApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetRecentlyAddedLibraryResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Libraries
     * 
     * A library section (commonly referred to as just a library) is a collection of media. 
     * Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media. 
     * For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.
     * 
     * Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts. 
     * This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     * 
     * 
     * @return \LukeHagar\Plex_API\Models\Operations\GetLibrariesResponse
     */
	public function getLibraries(
    ): \LukeHagar\Plex_API\Models\Operations\GetLibrariesResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetLibrariesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetLibrariesResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Library Details
     * 
     * Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:
     * 
     * - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:
     *   - Primary: (e.g. all, On Deck) These are still used in some clients to provide "shortcuts" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.
     *   - Secondary: These are marked with `secondary="1"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.
     *   - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there's a completely obsolete entry marked `search="1"` which used to be used to allow clients to build search dialogs on the fly.
     * - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won't render any filtering controls. The `Type` object contains:
     *   - `key`: This provides the root endpoint returning the actual media list for the type.
     *   - `type`: This is the metadata type for the type (if a standard Plex type).
     *   - `title`: The title for for the content of this type (e.g. "Movies").
     * - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.
     *   - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.
     *   - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.
     *   - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a "Genre" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.
     *   - `title`: The title for the filter.
     * - Each `Sort` object contains a description of the sort field.
     *   - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).
     *   - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.
     *   - `title`: The title of the field.
     * 
     * 
     * @param float $sectionId
     * @param ?\LukeHagar\Plex_API\Models\Operations\IncludeDetails $includeDetails
     * @return \LukeHagar\Plex_API\Models\Operations\GetLibraryResponse
     */
	public function getLibrary(
        float $sectionId,
        ?\LukeHagar\Plex_API\Models\Operations\IncludeDetails $includeDetails = null,
    ): \LukeHagar\Plex_API\Models\Operations\GetLibraryResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetLibraryRequest();
        $request->sectionId = $sectionId;
        $request->includeDetails = $includeDetails;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections/{sectionId}', \LukeHagar\Plex_API\Models\Operations\GetLibraryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetLibraryRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetLibraryResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetLibraryResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Library Section
     * 
     * Delate a library using a specific section
     * 
     * @param float $sectionId
     * @return \LukeHagar\Plex_API\Models\Operations\DeleteLibraryResponse
     */
	public function deleteLibrary(
        float $sectionId,
    ): \LukeHagar\Plex_API\Models\Operations\DeleteLibraryResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\DeleteLibraryRequest();
        $request->sectionId = $sectionId;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections/{sectionId}', \LukeHagar\Plex_API\Models\Operations\DeleteLibraryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\DeleteLibraryResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\DeleteLibraryResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Library Items
     * 
     * This endpoint will return a list of library items filtered by the filter and type provided
     * 
     * 
     * @param float $sectionId
     * @param ?float $type
     * @param ?string $filter
     * @return \LukeHagar\Plex_API\Models\Operations\GetLibraryItemsResponse
     */
	public function getLibraryItems(
        float $sectionId,
        ?float $type = null,
        ?string $filter = null,
    ): \LukeHagar\Plex_API\Models\Operations\GetLibraryItemsResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetLibraryItemsRequest();
        $request->sectionId = $sectionId;
        $request->type = $type;
        $request->filter = $filter;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections/{sectionId}/all', \LukeHagar\Plex_API\Models\Operations\GetLibraryItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetLibraryItemsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetLibraryItemsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetLibraryItemsResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh Library
     * 
     * This endpoint Refreshes the library.
     * 
     * 
     * @param float $sectionId
     * @return \LukeHagar\Plex_API\Models\Operations\RefreshLibraryResponse
     */
	public function refreshLibrary(
        float $sectionId,
    ): \LukeHagar\Plex_API\Models\Operations\RefreshLibraryResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\RefreshLibraryRequest();
        $request->sectionId = $sectionId;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections/{sectionId}/refresh', \LukeHagar\Plex_API\Models\Operations\RefreshLibraryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\RefreshLibraryResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\RefreshLibraryResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Latest Library Items
     * 
     * This endpoint will return a list of the latest library items filtered by the filter and type provided
     * 
     * 
     * @param float $sectionId
     * @param float $type
     * @param ?string $filter
     * @return \LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsResponse
     */
	public function getLatestLibraryItems(
        float $sectionId,
        float $type,
        ?string $filter = null,
    ): \LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsRequest();
        $request->sectionId = $sectionId;
        $request->type = $type;
        $request->filter = $filter;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections/{sectionId}/latest', \LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetLatestLibraryItemsResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Common Library Items
     * 
     * Represents a "Common" item. It contains only the common attributes of the items selected by the provided filter
     * 
     * 
     * @param float $sectionId
     * @param float $type
     * @param ?string $filter
     * @return \LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsResponse
     */
	public function getCommonLibraryItems(
        float $sectionId,
        float $type,
        ?string $filter = null,
    ): \LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsRequest();
        $request->sectionId = $sectionId;
        $request->type = $type;
        $request->filter = $filter;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/sections/{sectionId}/common', \LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetCommonLibraryItemsResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Items Metadata
     * 
     * This endpoint will return the metadata of a library item specified with the ratingKey.
     * 
     * 
     * @param float $ratingKey
     * @return \LukeHagar\Plex_API\Models\Operations\GetMetadataResponse
     */
	public function getMetadata(
        float $ratingKey,
    ): \LukeHagar\Plex_API\Models\Operations\GetMetadataResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetMetadataRequest();
        $request->ratingKey = $ratingKey;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/metadata/{ratingKey}', \LukeHagar\Plex_API\Models\Operations\GetMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetMetadataResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetMetadataResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Items Children
     * 
     * This endpoint will return the children of of a library item specified with the ratingKey.
     * 
     * 
     * @param float $ratingKey
     * @return \LukeHagar\Plex_API\Models\Operations\GetMetadataChildrenResponse
     */
	public function getMetadataChildren(
        float $ratingKey,
    ): \LukeHagar\Plex_API\Models\Operations\GetMetadataChildrenResponse
    {
        $request = new \LukeHagar\Plex_API\Models\Operations\GetMetadataChildrenRequest();
        $request->ratingKey = $ratingKey;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/metadata/{ratingKey}/children', \LukeHagar\Plex_API\Models\Operations\GetMetadataChildrenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetMetadataChildrenResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetMetadataChildrenResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get On Deck
     * 
     * This endpoint will return the on deck content.
     * 
     * 
     * @return \LukeHagar\Plex_API\Models\Operations\GetOnDeckResponse
     */
	public function getOnDeck(
    ): \LukeHagar\Plex_API\Models\Operations\GetOnDeckResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/library/onDeck');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \LukeHagar\Plex_API\Models\Operations\GetOnDeckResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->twoHundredApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetOnDeckResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fourHundredAndOneApplicationJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'LukeHagar\Plex_API\Models\Operations\GetOnDeckLibraryResponseBody', 'json');
            }
        }

        return $response;
    }
}