<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace LukeHagar\Plex_API;
use LukeHagar\Plex_API\Utils\Retry\RetryConfig;

class SDKConfiguration
{
    public ?\GuzzleHttp\ClientInterface $client = null;

    public Hooks\SDKHooks $hooks;
    /** @var ?pure-Closure(): Models\Components\Security */
    public ?\Closure $securitySource = null;
    public string $serverUrl = '';

    public int $serverIndex = 0;

    /** @var array<array<string, string>> */
    public ?array $serverVariables = [
        [
            'protocol' => 'https',
            'ip' => '10.10.10.47',
            'port' => '32400',
        ],
    ];

    public string $language = 'php';

    public string $openapiDocVersion = '0.0.3';

    public string $sdkVersion = '0.14.10';

    public string $genVersion = '2.623.4';

    public string $userAgent = 'speakeasy-sdk/php 0.14.10 2.623.4 0.0.3 lukehagar/plex-api';

    public ?RetryConfig $retryConfig = null;

    public function __construct()
    {
        $this->hooks = new Hooks\SDKHooks();
    }

    public function getServerUrl(): string
    {

        if ($this->serverUrl !== '') {
            return $this->serverUrl;
        }

        if (isset(PlexAPI::SERVERS[$this->serverIndex])) {
            return PlexAPI::SERVERS[$this->serverIndex];
        } else {
            throw new \OutOfBoundsException('Server index '.$this->serverIndex.' is out of bounds');
        }
    }

    /**
     * @return array<string, string>
     */
    public function getServerVariables(): ?array
    {
        return $this->serverVariables[$this->serverIndex];
    }
    public function hasSecurity(): bool
    {
        return $this->securitySource !== null;
    }

    public function getSecurity(): ?Models\Components\Security
    {
        return $this->securitySource->call($this);
    }

    /**
     * @return Utils\ServerDetails
     */
    public function getServerDetails(): Utils\ServerDetails
    {
        if ($this->serverUrl !== '') {
            return new Utils\ServerDetails(rtrim($this->serverUrl, '/'), []);
        }
        if ($this->serverIndex === null) {
            $this->serverIndex = 0;
        }

        return new Utils\ServerDetails(PlexAPI::SERVERS[$this->serverIndex], $this->serverVariables[$this->serverIndex]);

    }

    public function getTemplatedServerUrl(): string
    {
        if ($this->serverUrl) {
            return Utils\Utils::templateUrl($this->serverUrl.trim('/'), []);
        }

        return Utils\Utils::templateUrl($this->getServerUrl(), $this->getServerVariables());
    }
}
